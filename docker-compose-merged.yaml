version: '3'
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
    - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test:
      - CMD
      - pg_isready
      - -U
      - airflow
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
    - default
  redis:
    image: redis:7.2-bookworm
    expose:
    - 6379
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
    - default

  airflow-apiserver:
    build: &id001
      context: .
      dockerfile: dockerfile_airflow
    environment: &id002
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: '${_PIP_ADDITIONAL_REQUIREMENTS:-} apache-airflow-providers-apache-spark

        '
      AIRFLOW_CONFIG: /opt/airflow/config/airflow.cfg
    volumes: &id003
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/scripts:/opt/airflow/scripts
    - ${AIRFLOW_PROJ_DIR:-.}/jars:/opt/spark/jars
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: &id004
        condition: service_healthy
      postgres: &id005
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: api-server
    ports:
    - 8080:8080
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8080/api/v2/version
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
    - default

  airflow-scheduler:
    build: *id001
    environment: *id002
    volumes: *id003
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id004
      postgres: *id005
      airflow-init:
        condition: service_completed_successfully
    command: scheduler
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:8974/health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
    - default
  airflow-dag-processor:
    build: *id001
    environment: *id002
    volumes: *id003
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id004
      postgres: *id005
      airflow-init:
        condition: service_completed_successfully
    command: dag-processor
    healthcheck:
      test:
      - CMD-SHELL
      - airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
    - default
  airflow-worker:
    build: *id001
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: '${_PIP_ADDITIONAL_REQUIREMENTS:-} apache-airflow-providers-apache-spark

        '
      AIRFLOW_CONFIG: /opt/airflow/config/airflow.cfg
      DUMB_INIT_SETSID: '0'
    volumes: *id003
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id004
      postgres: *id005
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: celery worker
    healthcheck:
      test:
      - CMD-SHELL
      - celery --app airflow.providers.celery.executors.celery_executor.app inspect
        ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app
        inspect ping -d "celery@$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
    - default
  airflow-triggerer:
    build: *id001
    environment: *id002
    volumes: *id003
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id004
      postgres: *id005
      airflow-init:
        condition: service_completed_successfully
    command: triggerer
    healthcheck:
      test:
      - CMD-SHELL
      - airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
    - default
  airflow-init:
    build: *id001
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      AIRFLOW_CONFIG: /opt/airflow/config/airflow.cfg
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    volumes: *id003
    user: 0:0
    depends_on:
      redis: *id004
      postgres: *id005
    entrypoint: /bin/bash
    command:
    - -c
    - "if [[ -z \"${AIRFLOW_UID}\" ]]; then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!:\
      \ AIRFLOW_UID not set!\\e[0m\"\n  echo \"If you are on Linux, you SHOULD follow\
      \ the instructions below to set \"\n  echo \"AIRFLOW_UID environment variable,\
      \ otherwise files will be owned by root.\"\n  echo \"For other operating systems\
      \ you can get rid of the warning with manually created .env file:\"\n  echo\
      \ \"    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user\"\
      \n  echo\n  export AIRFLOW_UID=$$(id -u)\nfi\none_meg=1048576\nmem_available=$$(($$(getconf\
      \ _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))\ncpus_available=$$(grep -cE\
      \ 'cpu[0-9]+' /proc/stat)\ndisk_available=$$(df / | tail -1 | awk '{print $$4}')\n\
      warning_resources=\"false\"\nif (( mem_available < 4000 )) ; then\n  echo\n\
      \  echo -e \"\\033[1;33mWARNING!!!: Not enough memory available for Docker.\\\
      e[0m\"\n  echo \"At least 4GB of memory required. You have $$(numfmt --to iec\
      \ $$((mem_available * one_meg)))\"\n  echo\n  warning_resources=\"true\"\nfi\n\
      if (( cpus_available < 2 )); then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!:\
      \ Not enough CPUS available for Docker.\\e[0m\"\n  echo \"At least 2 CPUs recommended.\
      \ You have $${cpus_available}\"\n  echo\n  warning_resources=\"true\"\nfi\n\
      if (( disk_available < one_meg * 10 )); then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!:\
      \ Not enough Disk space available for Docker.\\e[0m\"\n  echo \"At least 10\
      \ GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))\"\
      \n  echo\n  warning_resources=\"true\"\nfi\nif [[ $${warning_resources} == \"\
      true\" ]]; then\n  echo\n  echo -e \"\\033[1;33mWARNING!!!: You have not enough\
      \ resources to run Airflow (see above)!\\e[0m\"\n  echo \"Please follow the\
      \ instructions to increase amount of resources available:\"\n  echo \"   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin\"\
      \n  echo\nfi\necho\necho \"Creating missing opt dirs if missing:\"\necho\nmkdir\
      \ -v -p /opt/airflow/{logs,dags,plugins,config}\necho\necho \"Airflow version:\"\
      \n/entrypoint airflow version\necho\necho \"Files in shared volumes:\"\necho\n\
      ls -la /opt/airflow/{logs,dags,plugins,config}\necho\necho \"Running airflow\
      \ config list to create default config file if missing.\"\necho\n/entrypoint\
      \ airflow config list >/dev/null\necho\necho \"Files in shared volumes:\"\n\
      echo\nls -la /opt/airflow/{logs,dags,plugins,config}\necho\necho \"Change ownership\
      \ of files in /opt/airflow to ${AIRFLOW_UID}:0\"\necho\nchown -R \"${AIRFLOW_UID}:0\"\
      \ /opt/airflow/\necho\necho \"Change ownership of files in shared volumes to\
      \ ${AIRFLOW_UID}:0\"\necho\nchown -v -R \"${AIRFLOW_UID}:0\" /opt/airflow/{logs,dags,plugins,config}\n\
      echo\necho \"Files in shared volumes:\"\necho\nls -la /opt/airflow/{logs,dags,plugins,config}\n"
    networks:
    - default
  airflow-cli:
    build: *id001
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: '${_PIP_ADDITIONAL_REQUIREMENTS:-} apache-airflow-providers-apache-spark

        '
      AIRFLOW_CONFIG: /opt/airflow/config/airflow.cfg
      CONNECTION_CHECK_MAX_COUNT: '0'
    volumes: *id003
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id004
      postgres: *id005
    profiles:
    - debug
    command:
    - bash
    - -c
    - airflow
    networks:
    - default
  flower:
    build: *id001
    environment: *id002
    volumes: *id003
    user: ${AIRFLOW_UID:-50000}:0
    depends_on:
      redis: *id004
      postgres: *id005
      airflow-init:
        condition: service_completed_successfully
    command: celery flower
    profiles:
    - flower
    ports:
    - 5555:5555
    healthcheck:
      test:
      - CMD
      - curl
      - --fail
      - http://localhost:5555/
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
    - default
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    hostname: spark-master
    environment:
    - SPARK_MODE=master
    - SPARK_MASTER_HOST=spark-master
    ports:
    - 7077:7077
    - 7080:7080
    volumes:
    - ./scripts:/opt/airflow/scripts
    - ./jars:/opt/spark/jars
    networks:
    - default
  spark-worker:
    image: bitnami/spark:3.5.1
    container_name: spark-worker
    environment:
    - SPARK_MODE=worker
    - SPARK_MASTER_URL=spark://spark-master:7077
    - SPARK_WORKER_MEMORY=1G
    - SPARK_WORKER_CORES=1
    depends_on:
    - spark-master
    volumes:
    - ./scripts:/opt/airflow/scripts
    - ./jars:/opt/spark/jars
    networks:
    - default
  spark-history:
    image: bitnami/spark:3.5.1
    container_name: spark-history
    environment:
    - SPARK_MODE=history-server
    - SPARK_HISTORY_OPTS=-Dspark.history.fs.logDirectory=/tmp/spark-events
    ports:
    - 18080:18080
    volumes:
    - ./spark-events:/tmp/spark-events
    - ./jars:/opt/spark/jars
    depends_on:
    - spark-master
    networks:
    - default
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: airflow
      MYSQL_USER: airflow
      MYSQL_PASSWORD: airflow
    ports:
    - 3308:3306
    volumes:
    - mysql-data:/var/lib/mysql
    - ./csv-data/mysql:/csv-data/mysql
    restart: always
    networks:
    - default
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    environment:
    - CASSANDRA_CLUSTER_NAME=AirflowSparkCluster
    - CASSANDRA_NUM_TOKENS=256
    - CASSANDRA_START_RPC=true
    ports:
    - 9044:9042
    volumes:
    - cassandra-data:/var/lib/cassandra
    - ./csv-data/cassandra:/csv-data/cassandra
    restart: always
    networks:
    - default
  
  broker:
    image: confluentinc/cp-kafka:7.6.1
    hostname: broker
    container_name: broker
    ports:
    - 9092:9092
    - 9101:9101
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
    - broker
    ports:
    - 8091:8081 #bind to 8091 to avoid conflict with spark-master
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.4-7.6.0
    hostname: connect
    container_name: connect
    depends_on:
    - broker
    - schema-registry
    ports:
    - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.6.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.6.1
    hostname: control-center
    container_name: control-center
    depends_on:
    - broker
    - schema-registry
    - connect
    - ksqldb-server
    ports:
    - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:29092
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: connect:8083
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: /connectors
      CONTROL_CENTER_KSQL_KSQLDB1_URL: http://ksqldb-server:8088
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: http://localhost:8088
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default


  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.6.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
    - broker
    - connect
    ports:
    - 8088:8088
    environment:
      KSQL_CONFIG_DIR: /etc/ksql
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      KSQL_KSQL_CONNECT_URL: http://connect:8083
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default


  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.6.1
    container_name: ksqldb-cli
    depends_on:
    - broker
    - connect
    - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default

  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.6.1
    hostname: ksql-datagen
    container_name: ksql-datagen
    depends_on:
    - ksqldb-server
    - broker
    - schema-registry
    - connect
    command: bash -c 'echo Waiting for Kafka to be ready... && cub kafka-ready -b
      broker:29092 1 40 && echo Waiting for Confluent Schema Registry to be ready...
      && cub sr-ready schema-registry 8081 40 && echo Waiting a few seconds for topic
      creation to finish... && sleep 11 && tail -f /dev/null'
    environment:
      KSQL_CONFIG_DIR: /etc/ksql
      STREAMS_BOOTSTRAP_SERVERS: broker:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default


  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.6.1
    depends_on:
    - broker
    - schema-registry
    ports:
    - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: broker:29092
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    volumes:
    - ./scripts:/opt/airflow/scripts
    networks:
    - default

networks:
  default:
volumes:
  postgres-db-volume:
  mysql-data:
  cassandra-data:
